// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: server/proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DistNinjaService_Health_FullMethodName                       = "/distninja.DistNinjaService/Health"
	DistNinjaService_Status_FullMethodName                       = "/distninja.DistNinjaService/Status"
	DistNinjaService_CreateBuild_FullMethodName                  = "/distninja.DistNinjaService/CreateBuild"
	DistNinjaService_GetBuild_FullMethodName                     = "/distninja.DistNinjaService/GetBuild"
	DistNinjaService_GetBuildStats_FullMethodName                = "/distninja.DistNinjaService/GetBuildStats"
	DistNinjaService_GetBuildOrder_FullMethodName                = "/distninja.DistNinjaService/GetBuildOrder"
	DistNinjaService_CreateRule_FullMethodName                   = "/distninja.DistNinjaService/CreateRule"
	DistNinjaService_GetRule_FullMethodName                      = "/distninja.DistNinjaService/GetRule"
	DistNinjaService_GetTargetsByRule_FullMethodName             = "/distninja.DistNinjaService/GetTargetsByRule"
	DistNinjaService_GetAllTargets_FullMethodName                = "/distninja.DistNinjaService/GetAllTargets"
	DistNinjaService_GetTarget_FullMethodName                    = "/distninja.DistNinjaService/GetTarget"
	DistNinjaService_GetTargetDependencies_FullMethodName        = "/distninja.DistNinjaService/GetTargetDependencies"
	DistNinjaService_GetTargetReverseDependencies_FullMethodName = "/distninja.DistNinjaService/GetTargetReverseDependencies"
	DistNinjaService_UpdateTargetStatus_FullMethodName           = "/distninja.DistNinjaService/UpdateTargetStatus"
	DistNinjaService_FindCycles_FullMethodName                   = "/distninja.DistNinjaService/FindCycles"
	DistNinjaService_DebugQuads_FullMethodName                   = "/distninja.DistNinjaService/DebugQuads"
	DistNinjaService_LoadNinjaFile_FullMethodName                = "/distninja.DistNinjaService/LoadNinjaFile"
)

// DistNinjaServiceClient is the client API for DistNinjaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistNinjaServiceClient interface {
	// Admin
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Build
	CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*CreateBuildResponse, error)
	GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*NinjaBuild, error)
	GetBuildStats(ctx context.Context, in *BuildStatsRequest, opts ...grpc.CallOption) (*BuildStatsResponse, error)
	GetBuildOrder(ctx context.Context, in *BuildOrderRequest, opts ...grpc.CallOption) (*BuildOrderResponse, error)
	// Rule
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error)
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*NinjaRule, error)
	GetTargetsByRule(ctx context.Context, in *GetTargetsByRuleRequest, opts ...grpc.CallOption) (*GetTargetsByRuleResponse, error)
	// Target
	GetAllTargets(ctx context.Context, in *GetAllTargetsRequest, opts ...grpc.CallOption) (*GetAllTargetsResponse, error)
	GetTarget(ctx context.Context, in *GetTargetRequest, opts ...grpc.CallOption) (*NinjaTarget, error)
	GetTargetDependencies(ctx context.Context, in *GetTargetDependenciesRequest, opts ...grpc.CallOption) (*GetTargetDependenciesResponse, error)
	GetTargetReverseDependencies(ctx context.Context, in *GetTargetReverseDependenciesRequest, opts ...grpc.CallOption) (*GetTargetReverseDependenciesResponse, error)
	UpdateTargetStatus(ctx context.Context, in *UpdateTargetStatusRequest, opts ...grpc.CallOption) (*UpdateTargetStatusResponse, error)
	// Analysis
	FindCycles(ctx context.Context, in *FindCyclesRequest, opts ...grpc.CallOption) (*FindCyclesResponse, error)
	// Debug
	DebugQuads(ctx context.Context, in *DebugQuadsRequest, opts ...grpc.CallOption) (*DebugQuadsResponse, error)
	// Load
	LoadNinjaFile(ctx context.Context, in *LoadNinjaFileRequest, opts ...grpc.CallOption) (*LoadNinjaFileResponse, error)
}

type distNinjaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistNinjaServiceClient(cc grpc.ClientConnInterface) DistNinjaServiceClient {
	return &distNinjaServiceClient{cc}
}

func (c *distNinjaServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*CreateBuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBuildResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_CreateBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*NinjaBuild, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NinjaBuild)
	err := c.cc.Invoke(ctx, DistNinjaService_GetBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetBuildStats(ctx context.Context, in *BuildStatsRequest, opts ...grpc.CallOption) (*BuildStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildStatsResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_GetBuildStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetBuildOrder(ctx context.Context, in *BuildOrderRequest, opts ...grpc.CallOption) (*BuildOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildOrderResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_GetBuildOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRuleResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_CreateRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*NinjaRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NinjaRule)
	err := c.cc.Invoke(ctx, DistNinjaService_GetRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetTargetsByRule(ctx context.Context, in *GetTargetsByRuleRequest, opts ...grpc.CallOption) (*GetTargetsByRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTargetsByRuleResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_GetTargetsByRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetAllTargets(ctx context.Context, in *GetAllTargetsRequest, opts ...grpc.CallOption) (*GetAllTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTargetsResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_GetAllTargets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetTarget(ctx context.Context, in *GetTargetRequest, opts ...grpc.CallOption) (*NinjaTarget, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NinjaTarget)
	err := c.cc.Invoke(ctx, DistNinjaService_GetTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetTargetDependencies(ctx context.Context, in *GetTargetDependenciesRequest, opts ...grpc.CallOption) (*GetTargetDependenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTargetDependenciesResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_GetTargetDependencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) GetTargetReverseDependencies(ctx context.Context, in *GetTargetReverseDependenciesRequest, opts ...grpc.CallOption) (*GetTargetReverseDependenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTargetReverseDependenciesResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_GetTargetReverseDependencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) UpdateTargetStatus(ctx context.Context, in *UpdateTargetStatusRequest, opts ...grpc.CallOption) (*UpdateTargetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTargetStatusResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_UpdateTargetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) FindCycles(ctx context.Context, in *FindCyclesRequest, opts ...grpc.CallOption) (*FindCyclesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCyclesResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_FindCycles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) DebugQuads(ctx context.Context, in *DebugQuadsRequest, opts ...grpc.CallOption) (*DebugQuadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebugQuadsResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_DebugQuads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distNinjaServiceClient) LoadNinjaFile(ctx context.Context, in *LoadNinjaFileRequest, opts ...grpc.CallOption) (*LoadNinjaFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadNinjaFileResponse)
	err := c.cc.Invoke(ctx, DistNinjaService_LoadNinjaFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistNinjaServiceServer is the server API for DistNinjaService service.
// All implementations must embed UnimplementedDistNinjaServiceServer
// for forward compatibility.
type DistNinjaServiceServer interface {
	// Admin
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Build
	CreateBuild(context.Context, *CreateBuildRequest) (*CreateBuildResponse, error)
	GetBuild(context.Context, *GetBuildRequest) (*NinjaBuild, error)
	GetBuildStats(context.Context, *BuildStatsRequest) (*BuildStatsResponse, error)
	GetBuildOrder(context.Context, *BuildOrderRequest) (*BuildOrderResponse, error)
	// Rule
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error)
	GetRule(context.Context, *GetRuleRequest) (*NinjaRule, error)
	GetTargetsByRule(context.Context, *GetTargetsByRuleRequest) (*GetTargetsByRuleResponse, error)
	// Target
	GetAllTargets(context.Context, *GetAllTargetsRequest) (*GetAllTargetsResponse, error)
	GetTarget(context.Context, *GetTargetRequest) (*NinjaTarget, error)
	GetTargetDependencies(context.Context, *GetTargetDependenciesRequest) (*GetTargetDependenciesResponse, error)
	GetTargetReverseDependencies(context.Context, *GetTargetReverseDependenciesRequest) (*GetTargetReverseDependenciesResponse, error)
	UpdateTargetStatus(context.Context, *UpdateTargetStatusRequest) (*UpdateTargetStatusResponse, error)
	// Analysis
	FindCycles(context.Context, *FindCyclesRequest) (*FindCyclesResponse, error)
	// Debug
	DebugQuads(context.Context, *DebugQuadsRequest) (*DebugQuadsResponse, error)
	// Load
	LoadNinjaFile(context.Context, *LoadNinjaFileRequest) (*LoadNinjaFileResponse, error)
	mustEmbedUnimplementedDistNinjaServiceServer()
}

// UnimplementedDistNinjaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistNinjaServiceServer struct{}

func (UnimplementedDistNinjaServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedDistNinjaServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDistNinjaServiceServer) CreateBuild(context.Context, *CreateBuildRequest) (*CreateBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuild not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetBuild(context.Context, *GetBuildRequest) (*NinjaBuild, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuild not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetBuildStats(context.Context, *BuildStatsRequest) (*BuildStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildStats not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetBuildOrder(context.Context, *BuildOrderRequest) (*BuildOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildOrder not implemented")
}
func (UnimplementedDistNinjaServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetRule(context.Context, *GetRuleRequest) (*NinjaRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetTargetsByRule(context.Context, *GetTargetsByRuleRequest) (*GetTargetsByRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetsByRule not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetAllTargets(context.Context, *GetAllTargetsRequest) (*GetAllTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTargets not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetTarget(context.Context, *GetTargetRequest) (*NinjaTarget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTarget not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetTargetDependencies(context.Context, *GetTargetDependenciesRequest) (*GetTargetDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetDependencies not implemented")
}
func (UnimplementedDistNinjaServiceServer) GetTargetReverseDependencies(context.Context, *GetTargetReverseDependenciesRequest) (*GetTargetReverseDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetReverseDependencies not implemented")
}
func (UnimplementedDistNinjaServiceServer) UpdateTargetStatus(context.Context, *UpdateTargetStatusRequest) (*UpdateTargetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetStatus not implemented")
}
func (UnimplementedDistNinjaServiceServer) FindCycles(context.Context, *FindCyclesRequest) (*FindCyclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCycles not implemented")
}
func (UnimplementedDistNinjaServiceServer) DebugQuads(context.Context, *DebugQuadsRequest) (*DebugQuadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugQuads not implemented")
}
func (UnimplementedDistNinjaServiceServer) LoadNinjaFile(context.Context, *LoadNinjaFileRequest) (*LoadNinjaFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadNinjaFile not implemented")
}
func (UnimplementedDistNinjaServiceServer) mustEmbedUnimplementedDistNinjaServiceServer() {}
func (UnimplementedDistNinjaServiceServer) testEmbeddedByValue()                          {}

// UnsafeDistNinjaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistNinjaServiceServer will
// result in compilation errors.
type UnsafeDistNinjaServiceServer interface {
	mustEmbedUnimplementedDistNinjaServiceServer()
}

func RegisterDistNinjaServiceServer(s grpc.ServiceRegistrar, srv DistNinjaServiceServer) {
	// If the following call pancis, it indicates UnimplementedDistNinjaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DistNinjaService_ServiceDesc, srv)
}

func _DistNinjaService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_CreateBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).CreateBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_CreateBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).CreateBuild(ctx, req.(*CreateBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetBuild(ctx, req.(*GetBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetBuildStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetBuildStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetBuildStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetBuildStats(ctx, req.(*BuildStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetBuildOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetBuildOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetBuildOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetBuildOrder(ctx, req.(*BuildOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetTargetsByRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetsByRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetTargetsByRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetTargetsByRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetTargetsByRule(ctx, req.(*GetTargetsByRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetAllTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetAllTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetAllTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetAllTargets(ctx, req.(*GetAllTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetTarget(ctx, req.(*GetTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetTargetDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetTargetDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetTargetDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetTargetDependencies(ctx, req.(*GetTargetDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_GetTargetReverseDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetReverseDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).GetTargetReverseDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_GetTargetReverseDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).GetTargetReverseDependencies(ctx, req.(*GetTargetReverseDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_UpdateTargetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).UpdateTargetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_UpdateTargetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).UpdateTargetStatus(ctx, req.(*UpdateTargetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_FindCycles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).FindCycles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_FindCycles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).FindCycles(ctx, req.(*FindCyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_DebugQuads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugQuadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).DebugQuads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_DebugQuads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).DebugQuads(ctx, req.(*DebugQuadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistNinjaService_LoadNinjaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadNinjaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistNinjaServiceServer).LoadNinjaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistNinjaService_LoadNinjaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistNinjaServiceServer).LoadNinjaFile(ctx, req.(*LoadNinjaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistNinjaService_ServiceDesc is the grpc.ServiceDesc for DistNinjaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistNinjaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distninja.DistNinjaService",
	HandlerType: (*DistNinjaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _DistNinjaService_Health_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DistNinjaService_Status_Handler,
		},
		{
			MethodName: "CreateBuild",
			Handler:    _DistNinjaService_CreateBuild_Handler,
		},
		{
			MethodName: "GetBuild",
			Handler:    _DistNinjaService_GetBuild_Handler,
		},
		{
			MethodName: "GetBuildStats",
			Handler:    _DistNinjaService_GetBuildStats_Handler,
		},
		{
			MethodName: "GetBuildOrder",
			Handler:    _DistNinjaService_GetBuildOrder_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _DistNinjaService_CreateRule_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _DistNinjaService_GetRule_Handler,
		},
		{
			MethodName: "GetTargetsByRule",
			Handler:    _DistNinjaService_GetTargetsByRule_Handler,
		},
		{
			MethodName: "GetAllTargets",
			Handler:    _DistNinjaService_GetAllTargets_Handler,
		},
		{
			MethodName: "GetTarget",
			Handler:    _DistNinjaService_GetTarget_Handler,
		},
		{
			MethodName: "GetTargetDependencies",
			Handler:    _DistNinjaService_GetTargetDependencies_Handler,
		},
		{
			MethodName: "GetTargetReverseDependencies",
			Handler:    _DistNinjaService_GetTargetReverseDependencies_Handler,
		},
		{
			MethodName: "UpdateTargetStatus",
			Handler:    _DistNinjaService_UpdateTargetStatus_Handler,
		},
		{
			MethodName: "FindCycles",
			Handler:    _DistNinjaService_FindCycles_Handler,
		},
		{
			MethodName: "DebugQuads",
			Handler:    _DistNinjaService_DebugQuads_Handler,
		},
		{
			MethodName: "LoadNinjaFile",
			Handler:    _DistNinjaService_LoadNinjaFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/proto/grpc.proto",
}
