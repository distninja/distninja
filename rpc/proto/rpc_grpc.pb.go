// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: rpc/proto/rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerProto_SendServer_FullMethodName = "/rpc.ServerProto/SendServer"
)

// ServerProtoClient is the client API for ServerProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerProtoClient interface {
	SendServer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ServerRequest, ServerReply], error)
}

type serverProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewServerProtoClient(cc grpc.ClientConnInterface) ServerProtoClient {
	return &serverProtoClient{cc}
}

func (c *serverProtoClient) SendServer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ServerRequest, ServerReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerProto_ServiceDesc.Streams[0], ServerProto_SendServer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServerRequest, ServerReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServerProto_SendServerClient = grpc.ClientStreamingClient[ServerRequest, ServerReply]

// ServerProtoServer is the server API for ServerProto service.
// All implementations must embed UnimplementedServerProtoServer
// for forward compatibility.
type ServerProtoServer interface {
	SendServer(grpc.ClientStreamingServer[ServerRequest, ServerReply]) error
	mustEmbedUnimplementedServerProtoServer()
}

// UnimplementedServerProtoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerProtoServer struct{}

func (UnimplementedServerProtoServer) SendServer(grpc.ClientStreamingServer[ServerRequest, ServerReply]) error {
	return status.Errorf(codes.Unimplemented, "method SendServer not implemented")
}
func (UnimplementedServerProtoServer) mustEmbedUnimplementedServerProtoServer() {}
func (UnimplementedServerProtoServer) testEmbeddedByValue()                     {}

// UnsafeServerProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerProtoServer will
// result in compilation errors.
type UnsafeServerProtoServer interface {
	mustEmbedUnimplementedServerProtoServer()
}

func RegisterServerProtoServer(s grpc.ServiceRegistrar, srv ServerProtoServer) {
	// If the following call pancis, it indicates UnimplementedServerProtoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerProto_ServiceDesc, srv)
}

func _ServerProto_SendServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerProtoServer).SendServer(&grpc.GenericServerStream[ServerRequest, ServerReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServerProto_SendServerServer = grpc.ClientStreamingServer[ServerRequest, ServerReply]

// ServerProto_ServiceDesc is the grpc.ServiceDesc for ServerProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ServerProto",
	HandlerType: (*ServerProtoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendServer",
			Handler:       _ServerProto_SendServer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/proto/rpc.proto",
}
